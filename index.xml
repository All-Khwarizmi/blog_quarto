<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Education 2.0</title>
<link>https://all-khwarizmi.github.io/blog_quarto/</link>
<atom:link href="https://all-khwarizmi.github.io/blog_quarto/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Fri, 02 Feb 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Régression linéaire code Python</title>
  <dc:creator>Jason Suárez</dc:creator>
  <link>https://all-khwarizmi.github.io/blog_quarto/posts/rl-algorithm-code/</link>
  <description><![CDATA[ 





<p>Dans ce notebook, nous allons voir comment implémenter une régression linéaire en Python. Nous n’allons pas utiliser de bibliothèques pour ce faire, mais nous allons plutôt implémenter l’algorithme de régression linéaire à partir de zéro. Nous allons également voir comment utiliser notre implémentation pour prédire des valeurs à partir d’un ensemble de données.</p>
<div id="cell-2" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt </span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(2,)
[1 2]
(2,)
[1 2]</code></pre>
</div>
</div>
<section id="chargement-et-visualisation-des-données" class="level3">
<h3 class="anchored" data-anchor-id="chargement-et-visualisation-des-données">Chargement et visualisation des données</h3>
<div id="cell-4" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/train.csv'</span>)</span>
<span id="cb3-2">test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/test.csv'</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># On élimine les rangées avec des valeurs manquantes</span></span>
<span id="cb3-5">train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_data.dropna()</span>
<span id="cb3-6">test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_data.dropna()</span>
<span id="cb3-7"></span>
<span id="cb3-8">train_data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">x</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>24.0</td>
<td>21.549452</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>50.0</td>
<td>47.464463</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>15.0</td>
<td>17.218656</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>38.0</td>
<td>36.586398</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>87.0</td>
<td>87.288984</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-5" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># On sépare les données en X et y</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_data.x</span>
<span id="cb4-4">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_data.y</span>
<span id="cb4-5"></span>
<span id="cb4-6">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_data.x</span>
<span id="cb4-7">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_data.y</span></code></pre></div>
</div>
<div id="cell-6" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">train_data.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">x</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>699.000000</td>
<td>699.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>50.014306</td>
<td>49.939869</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>28.954560</td>
<td>29.109217</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>0.000000</td>
<td>-3.839981</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>25.000000</td>
<td>24.929968</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>49.000000</td>
<td>48.973020</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>75.000000</td>
<td>74.929911</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>100.000000</td>
<td>108.871618</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-7" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb6-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scatter plot of X and Y"</span>)</span>
<span id="cb6-3">plt.scatter(train_data.x, train_data.y)</span>
<span id="cb6-4">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/rl-algorithm-code/index_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="préparation-des-jeux-de-données" class="level3">
<h3 class="anchored" data-anchor-id="préparation-des-jeux-de-données">Préparation des jeux de données</h3>
<div id="cell-9" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataset_splitter</span>
<span id="cb7-2"></span>
<span id="cb7-3">X_train, X_val, y_train, y_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_splitter(X_train, y_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>train_size: 70.0% - test_size: 30.0%
X_train: 70%
X_val: 30%</code></pre>
</div>
</div>
</section>
<section id="standardisation-des-données" class="level3">
<h3 class="anchored" data-anchor-id="standardisation-des-données">Standardisation des données</h3>
<p>Standardization is a preprocessing technique used in machine learning to rescale and transform the features (variables) of a dataset to have a mean of 0 and a standard deviation of 1. It is also known as “z-score normalization” or “z-score scaling.” Standardization is an essential step in the data preprocessing pipeline for various reasons:</p>
</section>
<section id="why-use-standardization-in-machine-learning" class="level3">
<h3 class="anchored" data-anchor-id="why-use-standardization-in-machine-learning">Why Use Standardization in Machine Learning?</h3>
<ol type="1">
<li><p><strong>Mean Centering</strong>: Standardization centers the data by subtracting the mean from each feature. This ensures that the transformed data has a mean of 0. Mean centering is crucial because it helps in capturing the relative variations in the data.</p></li>
<li><p><strong>Scale Invariance</strong>: Standardization scales the data by dividing each feature by its standard deviation. This makes the data scale-invariant, meaning that the scale of the features no longer affects the performance of many machine learning algorithms. Without standardization, features with larger scales may dominate the learning process.</p></li>
<li><p><strong>Improved Convergence</strong>: Many machine learning algorithms, such as gradient-based optimization algorithms (e.g., gradient descent), converge faster when the features are standardized. It reduces the potential for numerical instability and overflow/underflow issues during training.</p></li>
<li><p><strong>Comparability</strong>: Standardizing the features makes it easier to compare and interpret the importance of each feature. This is especially important in models like linear regression, where the coefficients represent the feature’s impact on the target variable.</p></li>
<li><p><strong>Regularization</strong>: In regularization techniques like Ridge and Lasso regression, the regularization strength is applied uniformly to all features. Standardization ensures that the regularization term applies fairly to all features.</p></li>
</ol>
</section>
<section id="how-to-standardize-data" class="level3">
<h3 class="anchored" data-anchor-id="how-to-standardize-data">How to Standardize Data</h3>
<p>The standardization process involves the following steps:</p>
<ol type="1">
<li>Calculate the mean (<img src="https://latex.codecogs.com/png.latex?%5Cmu">) and standard deviation (<img src="https://latex.codecogs.com/png.latex?%5Csigma">) for each feature in the dataset.</li>
<li>For each data point (sample), subtract the mean (<img src="https://latex.codecogs.com/png.latex?%5Cmu">) of the feature and then divide by the standard deviation (<img src="https://latex.codecogs.com/png.latex?%5Csigma">) of the feature.</li>
</ol>
<p>Mathematically, the standardized value for a feature <code>x</code> in a dataset is calculated as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BStandardized%20value%7D%20=%20%5Cfrac%7Bx%20-%20%5Cmu%7D%7B%5Csigma%7D%0A"></p>
<p>Here, <code>x</code> is the original value of the feature, <img src="https://latex.codecogs.com/png.latex?%5Cmu"> is the mean of the feature, and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> is the standard deviation of the feature.</p>
<div id="cell-12" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">X_train, y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> standardize_data(X_train, y_train)</span>
<span id="cb9-2">X_val, y_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> standardize_data(X_val, y_val)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># On remodèle les données pour qu'elles soient compatibles avec le modèle</span></span>
<span id="cb9-5">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-6">X_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_val.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
</section>
<section id="implémentation-de-lalgorithme-de-régression-linéaire" class="level2">
<h2 class="anchored" data-anchor-id="implémentation-de-lalgorithme-de-régression-linéaire">Implémentation de l’algorithme de régression linéaire</h2>
<p>Linear regression is a fundamental model in machine learning used for predicting a continuous output variable based on input features. The model function for linear regression is represented as:</p>
<p><img src="https://latex.codecogs.com/png.latex?f_%7Bw,b%7D(x)%20=%20wx%20+%20b"></p>
<p>In this equation, <img src="https://latex.codecogs.com/png.latex?f_%7Bw,b%7D(x)"> represents the predicted output, <img src="https://latex.codecogs.com/png.latex?w"> is the weight parameter, <img src="https://latex.codecogs.com/png.latex?b"> is the bias parameter, and <img src="https://latex.codecogs.com/png.latex?x"> is the input feature.</p>
</section>
<section id="model-training" class="level2">
<h2 class="anchored" data-anchor-id="model-training">Model Training</h2>
<p>To train a linear regression model, we aim to find the best values for the parameters <img src="https://latex.codecogs.com/png.latex?(w,%20b)"> that best fit our dataset.</p>
<section id="forward-pass" class="level3">
<h3 class="anchored" data-anchor-id="forward-pass">Forward Pass</h3>
<p>The forward pass is a step where we compute the linear regression output for the input data <img src="https://latex.codecogs.com/png.latex?X"> using the current weights and biases. It’s essentially applying our model to the input data.</p>
</section>
<section id="cost-function" class="level3">
<h3 class="anchored" data-anchor-id="cost-function">Cost Function</h3>
<p>The cost function is used to measure how well our model is performing. It quantifies the difference between the predicted values and the actual values in our dataset. The cost function is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?J(w,b)%20=%20%5Cfrac%7B1%7D%7B2m%7D%20%5Csum_%7Bi=1%7D%5E%7Bm%7D(f_%7Bw,b%7D(x%5E%7B(i)%7D)%20-%20y%5E%7B(i)%7D)%5E2"></p>
<p>Here, <img src="https://latex.codecogs.com/png.latex?J(w,%20b)"> is the cost, <img src="https://latex.codecogs.com/png.latex?m"> is the number of training examples, <img src="https://latex.codecogs.com/png.latex?x%5E%7B(i)%7D"> is the input data for the <img src="https://latex.codecogs.com/png.latex?i">-th example, <img src="https://latex.codecogs.com/png.latex?y%5E%7B(i)%7D"> is the actual output for the <img src="https://latex.codecogs.com/png.latex?i">-th example, and <img src="https://latex.codecogs.com/png.latex?w"> and <img src="https://latex.codecogs.com/png.latex?b"> are the weight and bias parameters, respectively. **** ### Backward Pass (Gradient Computation)</p>
<p>The backward pass computes the gradients of the cost function with respect to the weights and biases. These gradients are crucial for updating the model parameters during training. The gradient formulas are as follows: <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J(w,b)%7D%7B%5Cpartial%20b%7D%20=%20%5Cfrac%7B1%7D%7Bm%7D%20%5Csum_%7Bi=0%7D%5E%7Bm-1%7D%20(f_%7Bw,b%7D(X%5E%7B(i)%7D)%20-%20y%5E%7B(i)%7D)%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J(w,b)%7D%7B%5Cpartial%20w%7D%20=%20%5Cfrac%7B1%7D%7Bm%7D%20%5Csum_%7Bi=0%7D%5E%7Bm-1%7D%20(f_%7Bw,b%7D(X%5E%7B(i)%7D)%20-%20y%5E%7B(i)%7D)X%5E%7B(i)%7D%0A"></p>
</section>
</section>
<section id="training-process" class="level2">
<h2 class="anchored" data-anchor-id="training-process">Training Process</h2>
<p>The training process involves iteratively updating the weights and biases to minimize the cost function. This is typically done through an optimization algorithm like gradient descent. The update equations for parameters are:</p>
<p><img src="https://latex.codecogs.com/png.latex?w%20%5Cleftarrow%20w%20-%20%5Calpha%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20w%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?b%20%5Cleftarrow%20b%20-%20%5Calpha%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20b%7D"></p>
<p>Here, <img src="https://latex.codecogs.com/png.latex?%5Calpha"> represents the learning rate, which controls the step size during parameter updates.</p>
<p>By iteratively performing the forward pass, computing the cost, performing the backward pass, and updating the parameters, the model learns to make better predictions and fit the data.</p>


</section>

 ]]></description>
  <category>Data Science</category>
  <category>Python</category>
  <guid>https://all-khwarizmi.github.io/blog_quarto/posts/rl-algorithm-code/</guid>
  <pubDate>Fri, 02 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://all-khwarizmi.github.io/blog_quarto/posts/rl-algorithm-code/image.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Régression linéaire simple avec Python</title>
  <dc:creator>Jason Suárez</dc:creator>
  <link>https://all-khwarizmi.github.io/blog_quarto/posts/regression/</link>
  <description><![CDATA[ 





<p>Les données sont disponibles sur <a href="https://www.kaggle.com/andonians/random-linear-regression">Kaggle</a>. Il s’agit d’un ensemble de données de régression linéaire aléatoire avec 2 variables. Bien que très simple, il est idéal pour illustrer le fonctionnement de la régression linéaire.</p>
<p>Le but de ce notebook est de construire un modèle de régression linéaire en Python et sans aucune librairie pour prédire la variable dépendante <code>y</code> à partir de la variable indépendante <code>x</code>.</p>
<div id="cell-2" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Importing libraries</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<section id="chargement-et-visualisation-des-données" class="level2">
<h2 class="anchored" data-anchor-id="chargement-et-visualisation-des-données">Chargement et visualisation des données</h2>
<p>Grâce à la librairie <code>pandas</code>, nous pouvons charger les données depuis un fichier CSV et les stocker dans un DataFrame. Nous pouvons ensuite visualiser les données avec la librairie <code>matplotlib</code>.</p>
<div id="cell-4" class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/train.csv'</span>)</span>
<span id="cb2-3">dataset_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/test.csv'</span>)</span>
<span id="cb2-4">dataset.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">x</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>24.0</td>
<td>21.549452</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>50.0</td>
<td>47.464463</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>15.0</td>
<td>17.218656</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>38.0</td>
<td>36.586398</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>87.0</td>
<td>87.288984</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>La méthode <code>head()</code> permet d’afficher les 5 premières lignes du DataFrame. Et la méthode <code>describe()</code> permet d’afficher des statistiques descriptives sur les données.</p>
<p>Ces deux méthodes sont très utiles pour avoir un aperçu des données.</p>
<div id="cell-6" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">dataset.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">x</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>700.000000</td>
<td>699.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>54.985939</td>
<td>49.939869</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>134.681703</td>
<td>29.109217</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>0.000000</td>
<td>-3.839981</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>25.000000</td>
<td>24.929968</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>49.000000</td>
<td>48.973020</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>75.000000</td>
<td>74.929911</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>3530.157369</td>
<td>108.871618</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Il est primordial de comprendre les données avant de commencer à les analyser. Il faut donc visualiser les données pour voir s’il y a des relations entre les variables et/ou des valeurs aberrantes ou manquantes.</p>
<div id="cell-8" class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">dataset.isna().values.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>True</code></pre>
</div>
</div>
<p>Comme nous sommes en présence de données manquantes, nous devons les gérer avant de commencer à construire notre modèle. Il existe plusieurs méthodes pour gérer les données manquantes. Dans un prochain notebook nous verrons les différentes méthodes pour gérer les données manquantes. Pour l’heure nous allons simplement supprimer les lignes qui contiennent des données manquantes.</p>
<div id="cell-10" class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.dropna()</span></code></pre></div>
</div>
<div id="cell-11" class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dataset.isna().values.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>False</code></pre>
</div>
</div>
<p>Ici, nous avons deux variables : la variable indépendante <code>X</code> et la variable dépendante <code>y</code>. Nous pouvons visualiser les données avec un nuage de points.</p>
<section id="distribution-des-données" class="level4">
<h4 class="anchored" data-anchor-id="distribution-des-données">Distribution des données</h4>
<p>L’analyse de la distribution des données est importante pour comprendre les données. Nous pouvons visualiser la distribution des données avec un histogramme.</p>
<p>Nous pouvons voir que les données sont distribuées uniformement, ce qui est une bonne chose pour la régression linéaire.</p>
<div id="cell-14" class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting the distribution of the data</span></span>
<span id="cb9-2">dataset.hist(bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span>
<span id="cb9-3">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/regression/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-15" class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting the correlation matrix</span></span>
<span id="cb10-2">corr_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.corr()</span>
<span id="cb10-3">corr_matrix[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>].sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="67">
<pre><code>y    1.00000
x    0.99534
Name: y, dtype: float64</code></pre>
</div>
</div>
</section>
<section id="la-corrélation-entre-les-variables" class="level4">
<h4 class="anchored" data-anchor-id="la-corrélation-entre-les-variables">La corrélation entre les variables</h4>
<p>La corrélation entre <code>X</code> et <code>y</code> est très importante pour la régression linéaire. Plus la corrélation est forte, plus la régression linéaire sera efficace.</p>
<p>Ici, sans surprise puisque le dataset a été créé à cet effet, nous avons une corrélation très forte entre <code>X</code> et <code>y</code>.</p>
<div id="cell-17" class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculer le coefficient de corrélation de Pearson</span></span>
<span id="cb12-4">correlation_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.corr()</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Afficher le coefficient de corrélation</span></span>
<span id="cb12-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coefficient de corrélation de Pearson entre x et y :"</span>)</span>
<span id="cb12-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(correlation_matrix.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>])</span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualiser la corrélation avec un nuage de points</span></span>
<span id="cb12-11">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb12-12">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset)</span>
<span id="cb12-13">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nuage de points de x contre y'</span>)</span>
<span id="cb12-14">plt.show()</span>
<span id="cb12-15"></span>
<span id="cb12-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualiser la matrice de corrélation avec une heatmap</span></span>
<span id="cb12-17">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb12-18">sns.heatmap(correlation_matrix, annot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coolwarm'</span>, center<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-19">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Matrice de corrélation'</span>)</span>
<span id="cb12-20">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Coefficient de corrélation de Pearson entre x et y :
0.9953399077212526</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/regression/index_files/figure-html/cell-10-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/regression/index_files/figure-html/cell-10-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="préparation-des-données" class="level2">
<h2 class="anchored" data-anchor-id="préparation-des-données">Préparation des données</h2>
<ul>
<li>Séparation des données en deux variables : variable indépendante <code>X</code> et variable dépendante <code>y</code></li>
<li>Conversion des données en tableaux Numpy</li>
</ul>
<div id="cell-19" class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.columns</span>
<span id="cb14-2">columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>Index(['x', 'y'], dtype='object')</code></pre>
</div>
</div>
<div id="cell-20" class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">X_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.x.to_numpy()</span>
<span id="cb16-2">y_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.y.to_numpy()</span></code></pre></div>
</div>
<section id="division-des-données" class="level4">
<h4 class="anchored" data-anchor-id="division-des-données">Division des données</h4>
<p>Nous passons ensuite à diviser notre dataset en données d’entraînement et données de test puis en données d’entraînement et données de validation.al</p>
<p>Le dataset dispose d’un second ficher test.csv qui contient des données de test. Mais nous allons, à des fins d’entraînement, ne pas en tenir compte jusqu’à la fin. Une foid le modèle construit, nous pourrons entraîner avec l’entièreté des données d’entraînement puis l’évaluer avec ces données de test.</p>
<div id="cell-22" class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">X_train, X_val, y_train, y_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_splitter(X_full, y_full, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb17-2">X_val, y_val, X_test, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_splitter(X_val, y_val, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X type: &lt;class 'numpy.ndarray'&gt;
y type: &lt;class 'numpy.ndarray'&gt;
X type: &lt;class 'numpy.ndarray'&gt;
y type: &lt;class 'numpy.ndarray'&gt;
train_size: 60.0% - test_size: 40.0%
X_train: 60%
X_val: 40%
X type: &lt;class 'numpy.ndarray'&gt;
y type: &lt;class 'numpy.ndarray'&gt;
X type: &lt;class 'numpy.ndarray'&gt;
y type: &lt;class 'numpy.ndarray'&gt;
train_size: 50.0% - test_size: 50.0%
X_train: 50%
X_val: 50%</code></pre>
</div>
</div>
</section>
<section id="standardisation-des-données" class="level3">
<h3 class="anchored" data-anchor-id="standardisation-des-données">Standardisation des données</h3>
<p>Cette étape est importante car elle permet d’éviter que certaines variables aient plus d’importance que d’autres dans le modèle. En effet, si une variable est exprimée en milliers et une autre en unités, la variable exprimée en milliers aura plus d’importance dans le modèle. Il faut donc standardiser les données pour que toutes les variables aient la même importance.</p>
<p>Deplus, cela permet d’accélérer la convergence de l’algorithme d’optimisation et éviter les problèmes de précision ou d’overflow.</p>
<div id="cell-24" class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalizing the data</span></span>
<span id="cb19-2">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalize(X_train)</span>
<span id="cb19-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X_train[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb19-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y_train[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0.29 0.58 0.84 0.76]
[29.6673599  56.68718792 85.02778957 73.13850045]</code></pre>
</div>
</div>
</section>
</section>
<section id="entraînement-du-modèle" class="level2">
<h2 class="anchored" data-anchor-id="entraînement-du-modèle">Entraînement du modèle</h2>
<p>Nous allons maintenant entraîner notre modèle. Pour cela, nous allons utiliser le gradient descent. Il s’agit d’un algorithme d’optimisation qui permet de trouver le minimum d’une fonction. Dans notre cas, il s’agit de trouver les paramètres de notre modèle qui minimisent la fonction de coût.</p>
<p>La fonction de coût est une fonction qui permet de mesurer l’erreur de notre modèle. Plus l’erreur est grande, plus la fonction de coût est grande. L’objectif est donc de trouver les paramètres de notre modèle qui minimisent la fonction de coût.</p>
<p>Nous utilisons la fonction de coût MSE (Mean Squared Error) qui est la moyenne des erreurs au carré. Il s’agit de la fonction de coût la plus utilisée pour la régression linéaire.</p>
<div id="cell-26" class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialisation des paramètres</span></span>
<span id="cb21-2">w_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb21-3">b_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyperparameters</span></span>
<span id="cb21-5">iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span></span>
<span id="cb21-6">tmp_alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5e-2</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># On effectue la descente de gradient pour trouver les paramètres w et b</span></span>
<span id="cb21-8">w_final, b_final, J_history, p_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gradient_descent(</span>
<span id="cb21-9">    X_train,</span>
<span id="cb21-10">    y_train,</span>
<span id="cb21-11">    w_init,</span>
<span id="cb21-12">    b_init,</span>
<span id="cb21-13">    tmp_alpha,</span>
<span id="cb21-14">    iterations,</span>
<span id="cb21-15">    compute_cost,</span>
<span id="cb21-16">    compute_gradient)</span>
<span id="cb21-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(w,b) found by gradient descent: (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>w_final<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b_final<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iteration 0: Cost 1551.859965285387  dj_dw: -32.873739546586314, dj_db: -48.578447077520295   w: 1.4931060931987947, b:1.7286767061628043
Iteration 2000: Cost 8.423656158596158  dj_dw: -0.6831496603139884, dj_db: 0.3678205742662411   w: 89.65499284685094, b:5.442780552104867
Iteration 4000: Cost 4.0614640156356385  dj_dw: -0.08960525186481552, dj_db: 0.04824514614125734   w: 98.41652047287423, b:0.7254099522683186
Iteration 6000: Cost 3.9864158627776507  dj_dw: -0.011753063242489757, dj_db: 0.006328069414907828   w: 99.56572530346672, b:0.10665654391001181
Iteration 8000: Cost 3.985124717164894  dj_dw: -0.0015415892786128443, dj_db: 0.0008300205455334563   w: 99.71646063171404, b:0.025497819520598132
Iteration 10000: Cost 3.9851025040000105  dj_dw: -0.00020220239226366815, dj_db: 0.00010886955575859842   w: 99.73623181486332, b:0.01485264414783104
Iteration 12000: Cost 3.9851021218396427  dj_dw: -2.6521855068231795e-05, dj_db: 1.4279863596465318e-05   w: 99.73882509997904, b:0.013456370862629252
Iteration 14000: Cost 3.985102115264865  dj_dw: -3.478736276372286e-06, dj_db: 1.8730167755593508e-06   w: 99.73916524794275, b:0.013273228827112946
Iteration 16000: Cost 3.9851021151517485  dj_dw: -4.5628806805420693e-07, dj_db: 2.456740467172917e-07   w: 99.73920986341393, b:0.013249207021663368
Iteration 18000: Cost 3.9851021151498016  dj_dw: -5.984895811768687e-08, dj_db: 3.222382454426939e-08   w: 99.73921571539752, b:0.013246056204090619
(w,b) found by gradient descent: (99.73921648285449,0.013245642990875566)</code></pre>
</div>
</div>
<p>Une fois le modèle entraîné, nous pouvons visualiser la fonction de coût en fonction des itérations. Nous pouvons voir que la fonction de coût diminue au fur et à mesure des itérations. Cela signifie que notre modèle s’améliore au fur et à mesure des itérations.</p>
<p>Il nous reste à effectuer les prédictions sur les données de test et à évaluer notre modèle.</p>
<div id="cell-28" class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Making predictions on the training set</span></span>
<span id="cb23-2">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalize(X_train)</span>
<span id="cb23-3">y_train_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_model_output(X_train, w_final, b_final)</span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Computing the RMSE on the training set</span></span>
<span id="cb23-5">mse_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_mse(y_train, y_train_pred)</span>
<span id="cb23-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MSE on the training set: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mse_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-7"></span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Making predictions on the validation set</span></span>
<span id="cb23-9">X_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalize(X_val)</span>
<span id="cb23-10">y_val_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_model_output(X_val, w_final, b_final)</span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Computing the MSE on the validation set</span></span>
<span id="cb23-12">mse_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_mse(y_val, y_val_pred)</span>
<span id="cb23-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MSE on the validation set: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mse_val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-14"></span>
<span id="cb23-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y_val[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb23-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y_val_pred[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>MSE on the training set: 3339.515572495507
MSE on the validation set: 231487.7780914846
[94. 75. 65. 84.]
[14.97412812 70.82808935 48.88546172  5.99759863]</code></pre>
</div>
</div>
<div id="cell-29" class="cell" data-execution_count="75">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Comparaison avec la regression linéaire de scikit-learn</span></span>
<span id="cb25-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape X_train and y_train to be 2D</span></span>
<span id="cb25-5">X_train_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb25-6">y_train_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb25-7"></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create linear regression object</span></span>
<span id="cb25-9">regr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb25-10"></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train the model using the training sets</span></span>
<span id="cb25-12">regr.fit(X_train_sk, y_train_sk)</span>
<span id="cb25-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(w,b) found by sklearn: (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>regr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>coef_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>regr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>intercept_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb25-14"></span>
<span id="cb25-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make predictions using the testing set</span></span>
<span id="cb25-16">y_train_pred_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> regr.predict(X_train_sk)</span>
<span id="cb25-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute MSE for the training set</span></span>
<span id="cb25-18">mse_train_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_mse(y_train.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), y_train_pred_sk)</span>
<span id="cb25-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MSE sklearn training set = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mse_train_sk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-20"></span>
<span id="cb25-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train sklearn model on the validation set</span></span>
<span id="cb25-22">X_val_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_val.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb25-23">y_val_pred_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> regr.predict(X_val_sk)</span>
<span id="cb25-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute MSE for the validation set</span></span>
<span id="cb25-25">mse_val_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_mse(y_val.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), y_val_pred_sk)</span>
<span id="cb25-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MSE sklearn validation set = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mse_val_sk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(w,b) found by sklearn: ([[99.7392166]],[0.01324558])
MSE sklearn training set = [3339.5155725]
MSE sklearn validation set = [231487.77835407]</code></pre>
</div>
</div>
<div id="cell-30" class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot cost versus iteration</span></span>
<span id="cb27-2">fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb27-3">ax1.plot(J_history[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>])</span>
<span id="cb27-4">ax2.plot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(J_history[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:])), J_history[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:])</span>
<span id="cb27-5">ax1.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cost vs. iteration(start)"</span>)</span>
<span id="cb27-6">ax2.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cost vs. iteration (end)"</span>)</span>
<span id="cb27-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cost'</span>)</span>
<span id="cb27-8">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cost'</span>)</span>
<span id="cb27-9">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iteration step'</span>)</span>
<span id="cb27-10">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'iteration step'</span>)</span>
<span id="cb27-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/regression/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-31" class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Entraînement du modèle sur le jeu de données complet</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalizing the data  </span></span>
<span id="cb28-3">X_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalize(X_full)</span>
<span id="cb28-4">w_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb28-5">b_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># some gradient descent settings</span></span>
<span id="cb28-7">iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb28-8">tmp_alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5e-2</span></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run gradient descent</span></span>
<span id="cb28-10">w_final, b_final, J_history, p_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gradient_descent(</span>
<span id="cb28-11">    X_full,</span>
<span id="cb28-12">    y_full,</span>
<span id="cb28-13">    w_init,</span>
<span id="cb28-14">    b_init,</span>
<span id="cb28-15">    tmp_alpha,</span>
<span id="cb28-16">    iterations,</span>
<span id="cb28-17">    compute_cost,</span>
<span id="cb28-18">    compute_gradient)</span>
<span id="cb28-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(w,b) found by gradient descent: (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>w_final<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b_final<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iteration 0: Cost 1537.3567329291454  dj_dw: -32.52024298395501, dj_db: -48.43972610894132   w: 1.487803644759325, b:1.7265958916341198
Iteration 1000: Cost 38.98085747456498  dj_dw: -1.8984414216810792, dj_db: 1.016621137292813   w: 71.34361556464307, b:15.273469067109064
Iteration 2000: Cost 8.763458563326123  dj_dw: -0.7047363066142613, dj_db: 0.37738854099322106   w: 89.40349545087861, b:5.6023459928707755
Iteration 3000: Cost 4.599407703716551  dj_dw: -0.26161107161811215, dj_db: 0.14009356364788061   w: 96.10765480886297, b:2.012247263814149
Iteration 4000: Cost 4.025588639661802  dj_dw: -0.09711483877137726, dj_db: 0.05200530605382486   w: 98.59636199973698, b:0.6795366216797071
Iteration 5000: Cost 3.9465146010936167  dj_dw: -0.036050813336207035, dj_db: 0.019305325579060225   w: 99.52021585689978, b:0.18480993316743607
Iteration 6000: Cost 3.9356179544550427  dj_dw: -0.013382724603611356, dj_db: 0.007166491729286533   w: 99.86316739114395, b:0.0011582922273052087
Iteration 7000: Cost 3.9341163629072184  dj_dw: -0.0049679133767509, dj_db: 0.0026603334657992147   w: 99.99047730485871, b:-0.06701657281066145
Iteration 8000: Cost 3.933909438956092  dj_dw: -0.0018441807666289998, dj_db: 0.0009875646852625613   w: 100.03773708506571, b:-0.09232433591668049
Iteration 9000: Cost 3.933880924196801  dj_dw: -0.0006845938006577501, dj_db: 0.00036660216479203765   w: 100.05528078421726, b:-0.10171904279395448
(w,b) found by gradient descent: (100.061789515827,-0.10520448934023051)</code></pre>
</div>
</div>
<div id="cell-32" class="cell" data-execution_count="78">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preparation du jeu de test</span></span>
<span id="cb30-2">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_test.x.to_numpy().reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)   </span>
<span id="cb30-3">y_test_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_test.y.to_numpy().reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="cell-33" class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluation du modèle sur le jeu de test</span></span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalizing the data</span></span>
<span id="cb31-3">X_test_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalize(X_test)</span>
<span id="cb31-4">y_test_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_model_output(X_test_norm, w_final, b_final)</span>
<span id="cb31-5"></span>
<span id="cb31-6">mse_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_mse(y_test_final, y_test_pred.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb31-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MSE on the test set: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mse_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>MSE on the test set: [2830.11215745]</code></pre>
</div>
</div>
<div id="cell-34" class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape X_train and y_train to be 2D</span></span>
<span id="cb33-3">X_full_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_full.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb33-4">y_full_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_full.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb33-5">X_test_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalize(X_test).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create linear regression object</span></span>
<span id="cb33-8">regr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train the model using the training sets</span></span>
<span id="cb33-10">regr.fit(X_full_sk, y_full_sk)</span>
<span id="cb33-11"></span>
<span id="cb33-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make predictions using the testing set</span></span>
<span id="cb33-13">y_test_pred_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> regr.predict(X_test_sk)</span>
<span id="cb33-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute MSE for the training set</span></span>
<span id="cb33-15">mse_test_sk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_mse(y_test_final, y_test_pred_sk)</span>
<span id="cb33-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MSE = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mse_test_sk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>MSE = [2829.87665761]</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Data Science</category>
  <category>Python</category>
  <guid>https://all-khwarizmi.github.io/blog_quarto/posts/regression/</guid>
  <pubDate>Tue, 30 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://all-khwarizmi.github.io/blog_quarto/posts/regression/image.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Dico, première version</title>
  <dc:creator>Jason Suárez</dc:creator>
  <link>https://all-khwarizmi.github.io/blog_quarto/posts/dico/dico-old.html</link>
  <description><![CDATA[ 





<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/dico/image.png" class="img-fluid"> <em>Ceci est une traduction de l’article <a href="https://dev.to/allkhwarizmi/dico-3ni2">Dico</a> de Jason Suárez, 19 février 2023.</em></p>
<section id="quest-ce-que-dico" class="level2">
<h2 class="anchored" data-anchor-id="quest-ce-que-dico">Qu’est-ce que Dico ?</h2>
<p>Tout d’abord, voici le <a href="https://github.com/All-Khwarizmi/Dico">dépôt Github</a> et le <a href="https://dico-uno.vercel.app">site</a>..</p>
<p>Ensuite, comme vous l’avez peut-être deviné, Dico est un simple dictionnaire français-espagnol.</p>
<p>Dico vous permet de chercher un mot à la fois dans les deux langues grâce à l’API du Dictionnaire en ligne PONS, pour laquelle vous aurez besoin d’une clé API, mais leur offre gratuite est largement suffisante pour commencer.</p>
<p>Pour ce projet, j’ai utilisé :</p>
<ul>
<li>Typescript pour des raisons de sécurité</li>
<li>Next.js pour le front-end et le back-end une base de données PostgreSQL hébergée sur Railway.app</li>
<li>Prisma comme ORM</li>
<li>Tailwindcss pour le style</li>
</ul>
</section>
<section id="lobjectif-de-dico" class="level2">
<h2 class="anchored" data-anchor-id="lobjectif-de-dico">L’objectif de Dico</h2>
<p>En tant que professeur d’espagnol, mon plus grand défi est de faire faire leurs devoirs aux élèves. Ensuite, le second est de les empêcher d’écrire tout en français dans un traducteur en ligne, mais plutôt de l’utiliser à bon escient lorsqu’ils en ont le plus besoin.</p>
<p>Cependant, ce que j’ai appris jusqu’à présent, c’est que bien qu’ils soient censés être des natifs numériques, ils ne savent pas utiliser un tel outil efficacement. C’est comme avoir une voiture mais ne pas savoir comment la conduire correctement.</p>
<p>J’ai donc introduit Dico dans un cours où ils pouvaient chercher un certain nombre de mots pour accomplir une série de tâches. Moins ils l’utilisent, plus ils obtiennent de points. Cela les oblige à essayer de deviner ou à réaliser qu’ils pourraient ne pas avoir besoin de ce mot spécifique pour comprendre le document.</p>
</section>
<section id="big-theta-de-dico" class="level2">
<h2 class="anchored" data-anchor-id="big-theta-de-dico">Big Theta de Dico</h2>
<p>Étant un développeur adepte des “free tyer”, j’ai rapidement réalisé que même s’il est peu probable que mes élèves utilisent Dico assez pour atteindre la limite d’utilisation de l’API (1000 mots), cela pourrait arriver.</p>
<p>De plus, j’ai également réalisé que le coût algorithmique de Dico pourrait être exponentiel si chaque élève recherche n’importe quel mot. Pas performant du tout.</p>
</section>
<section id="big-o-de-dico" class="level2">
<h2 class="anchored" data-anchor-id="big-o-de-dico">Big O de Dico</h2>
<p>La solution que j’ai trouvée est basée en partie sur la linguistique et une stratégie de partage des coûts.</p>
<p>Je sais en effet que nous, en tant que locuteurs, tendons à utiliser de moins en moins de vocabulaire de nos jours. J’ai donc pensé que si je pouvais stocker chaque mot la première fois qu’il a été recherché, cela rendrait le coût de l’algorithme linéaire au lieu d’exponentiel. Cela rendrait moins probable le dépassement de la limite de l’API puisque nous avons en moyenne environ 25 000 mots de vocabulaire. Enfin, cela pourrait améliorer la performance de recherche. Une fois qu’un mot a été recherché et stocké dans une base de données, il peut être accédé plus rapidement que s’il fallait le demander à l’API.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>En somme, Dico est un dictionnaire automatique qui, malgré sa simplicité, aurait pu être vraiment coûteux si je n’avais pas trouvé une sorte d’optimisation. C’est un peu le revers de la médaille avec lequel j’ai dû travailler en évitant de trop solliciter l’API du dictionnaire.</p>


</section>

 ]]></description>
  <category>API</category>
  <category>dictionnaire</category>
  <category>éducation</category>
  <category>numérique</category>
  <category>autonomie</category>
  <category>linguistique</category>
  <guid>https://all-khwarizmi.github.io/blog_quarto/posts/dico/dico-old.html</guid>
  <pubDate>Sun, 21 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://all-khwarizmi.github.io/blog_quarto/posts/dico/image.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Environnements virtuels avec Javascript</title>
  <dc:creator>Jason Suárez</dc:creator>
  <link>https://all-khwarizmi.github.io/blog_quarto/posts/virtual-environnements/js_env.html</link>
  <description><![CDATA[ 





<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/virtual-environnements/image.png" class="img-fluid"> <br> <br> <br></p>
<p>Dans le monde du développement logiciel, l’utilisation d’environnements virtuels est devenue une pratique essentielle, surtout lorsqu’il s’agit de gérer des projets complexes avec de nombreuses dépendances. Cet article se concentre sur l’écosystème JavaScript et explore l’utilisation d’outils tels que Git, npm et yarn dans le cadre de ces environnements.</p>
<section id="pourquoi-utiliser-des-environnements-virtuels" class="level2">
<h2 class="anchored" data-anchor-id="pourquoi-utiliser-des-environnements-virtuels">Pourquoi Utiliser des Environnements Virtuels ?</h2>
<p>Les environnements virtuels sont des espaces isolés où les développeurs peuvent gérer les dépendances de leurs projets de manière indépendante et sécurisée. Voici pourquoi ils sont si cruciaux :</p>
<ul>
<li><p>Isolation : Dans un environnement virtuel, chaque projet possède son propre ensemble de dépendances, isolé des autres projets. Cela signifie que vous pouvez travailler sur plusieurs projets ayant des besoins différents en termes de versions de bibliothèques sans que l’un interfère avec l’autre.</p></li>
<li><p>Reproductibilité : Les environnements virtuels assurent que votre projet fonctionnera de la même manière sur tous les systèmes où il est déployé. En définissant clairement les dépendances, vous évitez les problèmes liés aux différences de configurations entre les environnements de développement et de production.</p></li>
<li><p>Éviter les Conflits : L’utilisation d’environnements virtuels aide à prévenir les conflits entre les différentes versions des paquets nécessaires pour différents projets. Cela évite les situations où la mise à jour d’une bibliothèque pour un projet casse un autre projet dépendant d’une version antérieure.</p></li>
</ul>
</section>
<section id="environnements-virtuels-dans-javascript" class="level2">
<h2 class="anchored" data-anchor-id="environnements-virtuels-dans-javascript">Environnements Virtuels dans JavaScript</h2>
<ul>
<li><p>Le monde de JavaScript est vaste et en constante évolution, avec un écosystème riche en bibliothèques et outils. L’utilisation d’environnements virtuels dans ce contexte prend une importance particulière pour plusieurs raisons :</p></li>
<li><p>Gestion des Dépendances Complexes : JavaScript, en particulier avec Node.js, implique souvent de gérer de nombreuses dépendances, ce qui peut rapidement devenir complexe. Les environnements virtuels permettent de gérer ces dépendances de manière ordonnée, en s’assurant que chaque projet dispose de la version correcte de chaque paquet.</p></li>
<li><p>Développement Modulaire : JavaScript est célèbre pour son approche modulaire. Dans un environnement virtuel, il est plus facile de tester différents modules et de s’assurer qu’ils fonctionnent bien ensemble, sans affecter d’autres projets.</p></li>
<li><p>Collaboration et Consistance : En partageant un environnement virtuel bien défini entre les membres d’une équipe, on assure une uniformité dans le processus de développement, réduisant ainsi les problèmes liés aux différences d’environnements de travail.</p></li>
</ul>
</section>
<section id="gestion-des-dépendances-avec-git" class="level2">
<h2 class="anchored" data-anchor-id="gestion-des-dépendances-avec-git">Gestion des Dépendances avec Git</h2>
<p>Bien que Git soit principalement connu comme un outil de contrôle de version, il joue également un rôle crucial dans la gestion des dépendances dans les projets JavaScript :</p>
<ul>
<li><p>Contrôle de Version et Dépendances : Git permet de suivre les modifications apportées aux fichiers de dépendances, comme le package.json dans les projets Node.js. Cela aide à maintenir une historique claire des changements apportés aux dépendances et facilite la gestion des mises à jour ou des régressions.</p></li>
<li><p>Branches pour Gérer les Dépendances : L’utilisation des branches Git permet de tester de nouvelles versions de dépendances sans affecter la branche principale. Cela rend les expérimentations plus sûres et réduit les risques de perturbations dans le projet principal.</p></li>
<li><p>Intégration avec les Outils de CI/CD : En utilisant Git, les développeurs peuvent intégrer facilement leur gestion de dépendances avec des systèmes d’intégration continue et de déploiement continu (CI/CD), garantissant que les modifications de dépendances sont correctement testées avant d’être déployées.</p></li>
</ul>
</section>
<section id="npm-et-yarn-dans-les-environnements-virtuels-comparaison-et-pratiques" class="level2">
<h2 class="anchored" data-anchor-id="npm-et-yarn-dans-les-environnements-virtuels-comparaison-et-pratiques">NPM et Yarn dans les Environnements Virtuels : Comparaison et Pratiques</h2>
<p>Bien que npm et Yarn soient tous deux utilisés pour la gestion des dépendances dans les projets JavaScript, ils présentent des différences et des similarités notables :</p>
<ul>
<li><p>Fonctionnalités Communes : npm et Yarn servent tous deux à gérer les dépendances des projets Node.js, utilisant un dossier node_modules pour les installations locales. Chacun commence par initialiser un projet (npm avec npm init et Yarn avec yarn init) et gère les dépendances avec un fichier de verrouillage (package-lock.json pour npm et yarn.lock pour Yarn).</p></li>
<li><p>Avantages de Yarn sur npm : Yarn est reconnu pour sa vitesse supérieure, sa gestion efficace du cache et ses fonctionnalités avancées comme les Workspaces. Yarn offre également une meilleure fiabilité avec son fichier yarn.lock, qui enregistre des informations plus détaillées sur les versions exactes des paquets installés.</p></li>
<li><p>Gestion des Dépendances : Les deux outils permettent d’ajouter, de mettre à jour et de supprimer des paquets facilement (npm avec npm install/add, npm update et npm remove; Yarn avec yarn add, yarn upgrade, et yarn remove).</p></li>
<li><p>Meilleures Pratiques : Il est crucial de maintenir les dépendances à jour et de comprendre l’impact des mises à jour sur votre projet. Que vous utilisiez npm ou Yarn, une gestion attentive des dépendances directes et indirectes est essentielle pour la santé et la sécurité du projet.</p></li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>L’utilisation d’environnements virtuels et la gestion efficace des dépendances sont des piliers essentiels dans le développement moderne de logiciels, en particulier dans l’écosystème JavaScript. Que ce soit à travers npm ou Yarn, la capacité de gérer les dépendances de manière isolée et reproductible est cruciale pour la réussite et la stabilité des projets.</p>
<p>En embrassant ces outils et pratiques, les développeurs peuvent non seulement améliorer la qualité et la fiabilité de leurs applications, mais aussi faciliter la collaboration au sein des équipes et entre les projets. Il est important de rester à jour avec les meilleures pratiques et les nouvelles fonctionnalités offertes par ces outils, afin de tirer le meilleur parti des technologies disponibles.</p>
<p>En conclusion, les environnements virtuels et la gestion adéquate des dépendances ne sont pas seulement des facilitateurs techniques ; ils représentent une approche stratégique vers un développement plus ordonné, sécurisé et collaboratif.</p>


</section>

 ]]></description>
  <category>Git</category>
  <category>Javascript</category>
  <category>NodeJS</category>
  <category>NPM</category>
  <category>Yarn</category>
  <guid>https://all-khwarizmi.github.io/blog_quarto/posts/virtual-environnements/js_env.html</guid>
  <pubDate>Sun, 21 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://all-khwarizmi.github.io/blog_quarto/posts/virtual-environnements/image.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>Environnements virtuels avec Python</title>
  <dc:creator>Jason Suárez</dc:creator>
  <link>https://all-khwarizmi.github.io/blog_quarto/posts/virtual-environnements/python_env.html</link>
  <description><![CDATA[ 





<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/virtual-environnements/image.png" class="img-fluid"></p>
<p><br> <br></p>
<section id="introduction-à-python-et-aux-environnements-virtuels" class="level2">
<h2 class="anchored" data-anchor-id="introduction-à-python-et-aux-environnements-virtuels">Introduction à Python et aux Environnements Virtuels</h2>
<p>Python, l’un des langages de programmation les plus populaires et polyvalents, est largement utilisé dans divers domaines, allant du développement web à la science des données. Une caractéristique clé de Python est sa capacité à créer et à gérer des environnements virtuels. Ces environnements sont des espaces isolés qui permettent aux développeurs d’installer et de gérer des paquets spécifiques à chaque projet sans affecter les autres projets ou le système global. Cette isolation évite les conflits de dépendances et assure une plus grande reproductibilité des projets.</p>
</section>
<section id="création-dun-environnement-virtuel-avec-python" class="level2">
<h2 class="anchored" data-anchor-id="création-dun-environnement-virtuel-avec-python">Création d’un Environnement Virtuel avec Python</h2>
<p>Python offre un outil intégré, venv, pour créer des environnements virtuels. Voici comment vous pouvez créer et activer un environnement virtuel :</p>
<p>Création de l’Environnement :</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m venv mon_env</span></code></pre></div>
<p>Cette commande crée un nouvel environnement virtuel nommé mon_env.</p>
<p>Activation de l’Environnement :</p>
<p>Sur Windows :</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cmd code-with-copy"><code class="sourceCode dosbat"><span id="cb2-1">mon_env\Scripts\activate</span></code></pre></div>
<p>Sur Unix ou MacOS :</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> mon_env/bin/activate</span></code></pre></div>
<p>Cette étape active l’environnement virtuel, isolant ainsi vos installations de paquets.</p>
<p>Très bien, abordons maintenant la section sur Conda :</p>
<p>Introduction à Conda pour les Environnements Virtuels</p>
<p>Conda est un puissant gestionnaire de paquets et d’environnements virtuels qui se distingue dans la gestion des dépendances en Python. Contrairement à venv, qui est spécifique à Python, Conda est langage agnostique, ce qui lui permet de gérer des paquets dans plusieurs langages. Cela est particulièrement utile dans les projets interdisciplinaires qui impliquent différentes technologies.</p>
</section>
<section id="création-dun-environnement-avec-conda" class="level2">
<h2 class="anchored" data-anchor-id="création-dun-environnement-avec-conda">Création d’un Environnement avec Conda :</h2>
<section id="installation-de-conda" class="level3">
<h3 class="anchored" data-anchor-id="installation-de-conda">Installation de Conda :</h3>
<p>Pour installer Conda, vous pouvez télécharger et exécuter le script d’installation <a href="https://www.anaconda.com/products/individual">Anaconda</a> ou <a href="https://docs.conda.io/projects/miniconda/en/latest/miniconda-install.html">Miniconda</a> . Vous pouvez également installer Conda à l’aide de pip, le gestionnaire de paquets Python. Pour ce faire, exécutez la commande suivante :</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install conda</span></code></pre></div>
</section>
<section id="création-de-lenvironnement-conda" class="level3">
<h3 class="anchored" data-anchor-id="création-de-lenvironnement-conda">Création de l’Environnement Conda :</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> mon_env_python python=3.8</span></code></pre></div>
<p>Cette commande crée un environnement Conda nommé mon_env_python avec une version spécifique de Python.</p>
<p>Activation de l’Environnement Conda :</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate mon_env_python</span></code></pre></div>
<p>En activant l’environnement, vous isolez vos travaux et dépendances dans cet environnement.</p>
</section>
<section id="avantages-de-conda" class="level3">
<h3 class="anchored" data-anchor-id="avantages-de-conda">Avantages de Conda :</h3>
<ul>
<li>Gestion Multilingue : Conda peut gérer des paquets de différents langages, ce qui le rend idéal pour les projets complexes.</li>
<li>Environnements Plus Robustes : Conda facilite la création et la gestion d’environnements avec des dépendances complexes et interdépendantes.</li>
<li>Intégration avec des Outils Scientifiques : Conda est très populaire dans les communautés scientifiques et de data science pour sa capacité à gérer efficacement des bibliothèques scientifiques et des outils d’analyse de données.</li>
</ul>
</section>
</section>
<section id="gestion-des-dépendances-avec-conda" class="level2">
<h2 class="anchored" data-anchor-id="gestion-des-dépendances-avec-conda">Gestion des Dépendances avec Conda</h2>
<p>Conda simplifie non seulement la création d’environnements virtuels mais aussi la gestion des dépendances au sein de ces environnements :</p>
<ol type="1">
<li>Installation des Paquets avec Conda : Pour installer un paquet dans l’environnement actif, utilisez :</li>
</ol>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install nom_du_paquet</span></code></pre></div>
<p>Contrairement à pip, Conda cherche les paquets dans ses propres dépôts, ce qui peut inclure des optimisations spécifiques et des versions pré-compilées.</p>
<ol start="2" type="1">
<li>Liste des Paquets Installés : Pour voir les paquets installés dans l’environnement actif :</li>
</ol>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> list</span></code></pre></div>
<ol start="3" type="1">
<li>Mise à jour des Paquets : Pour mettre à jour un paquet spécifique :</li>
</ol>
<p>bash Copy code conda update nom_du_paquet Ou pour mettre à jour tous les paquets de l’environnement :</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> update <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all</span></span></code></pre></div>
<p>Avantages de Conda pour la Gestion des Dépendances :</p>
<ol start="4" type="1">
<li>Résolution de Dépendances Complexe :</li>
</ol>
<ul>
<li>Conda gère efficacement les dépendances complexes et leurs interdépendances.</li>
<li>Environnements Consistants : Conda assure une cohérence accrue entre les environnements de développement et de production.</li>
<li>Large Éventail de Paquets : Avec Anaconda, Conda offre un accès à une vaste bibliothèque de paquets scientifiques et de data science.</li>
</ul>
</section>
<section id="utilisation-de-pip-dans-les-environnements-virtuels" class="level2">
<h2 class="anchored" data-anchor-id="utilisation-de-pip-dans-les-environnements-virtuels">Utilisation de pip dans les Environnements Virtuels</h2>
<p>pip est le gestionnaire de paquets par défaut pour Python et est largement utilisé pour installer et gérer les paquets Python. Dans un environnement virtuel, pip est isolé et gère les installations de paquets spécifiques à cet environnement.</p>
<ol type="1">
<li>Installation des Paquets avec pip : Dans un environnement virtuel activé, vous pouvez installer des paquets en utilisant :</li>
</ol>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install nom_du_paquet</span></code></pre></div>
<p>Cela garantit que le paquet est installé uniquement dans l’environnement virtuel, sans affecter d’autres projets ou le système global.</p>
<ol start="2" type="1">
<li>Geler les Dépendances : Pour créer une liste de toutes les dépendances installées dans l’environnement :</li>
</ol>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> freeze  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt</span></code></pre></div>
<p>Ce fichier requirements.txt peut être utilisé pour recréer l’environnement ailleurs.</p>
<ol start="3" type="1">
<li>Installer des Dépendances à partir d’un Fichier requirements.txt :</li>
</ol>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div>
<p>Cette commande installe toutes les dépendances listées dans le fichier requirements.txt.</p>
<ol start="4" type="1">
<li>Comparaison entre pip et Conda :</li>
</ol>
<ul>
<li>Ciblage : pip est spécifiquement conçu pour Python, tandis que Conda est polyvalent et peut gérer des paquets dans plusieurs langages.</li>
<li>Sources de Paquets : pip installe des paquets à partir du Python Package Index (PyPI), tandis que Conda utilise ses propres dépôts, souvent optimisés pour des paquets scientifiques et de data science.</li>
<li>Gestion des Dépendances : Conda est généralement plus efficace dans la gestion des dépendances complexes et interdépendantes.</li>
</ul>
</section>
<section id="bonnes-pratiques-pour-la-gestion-des-environnements-virtuels" class="level2">
<h2 class="anchored" data-anchor-id="bonnes-pratiques-pour-la-gestion-des-environnements-virtuels">Bonnes Pratiques pour la Gestion des Environnements Virtuels</h2>
<p>Gérer efficacement les environnements virtuels est crucial pour le développement logiciel. Voici quelques bonnes pratiques :</p>
<ol type="1">
<li><p>Isolation des Projets : Utilisez des environnements virtuels distincts pour chaque projet afin d’éviter les conflits de dépendances et de garantir que les besoins spécifiques de chaque projet sont satisfaits.</p></li>
<li><p>Documentation des Dépendances :</p></li>
</ol>
<ul>
<li>Avec pip : Utilisez pip freeze pour créer un fichier requirements.txt, qui sert de documentation pour les dépendances du projet.</li>
<li>Avec Conda : Utilisez conda list –export &gt; environment.yml pour créer un fichier similaire.</li>
</ul>
<ol start="3" type="1">
<li>Reproductibilité des Environnements :</li>
</ol>
<ul>
<li><p>Partagez les fichiers requirements.txt ou environment.yml au sein de votre équipe pour assurer que tous travaillent avec les mêmes versions de dépendances. 4.Mise à Jour Régulière :</p></li>
<li><p>Vérifiez régulièrement les mises à jour des paquets pour bénéficier des dernières fonctionnalités et corrections de sécurité.</p></li>
</ul>
<ol start="5" type="1">
<li>Nettoyage des Environnements :</li>
</ol>
<ul>
<li>Supprimez les environnements virtuels qui ne sont plus utilisés pour libérer de l’espace et maintenir un système organisé.</li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Les environnements virtuels, que ce soit avec venv, Conda, ou pip, sont des outils essentiels dans le développement en Python. Ils offrent une isolation cruciale, garantissent la reproductibilité des projets et facilitent la gestion des dépendances. Conda, en particulier, se distingue par sa capacité à gérer des dépendances complexes et multi-langages, ce qui en fait un choix privilégié pour des projets scientifiques et de data science.</p>
<p>La clé d’un développement efficace et sans heurts réside dans l’utilisation judicieuse de ces outils. En suivant les bonnes pratiques telles que l’isolation des projets, la documentation des dépendances, et la mise à jour régulière, les développeurs peuvent assurer la stabilité et la sécurité de leurs applications.</p>
<p>En fin de compte, une bonne maîtrise des environnements virtuels et des outils de gestion de dépendances est un atout indéniable pour tout développeur Python, ouvrant la voie à des projets plus organisés, reproductibles et réussis.</p>


</section>

 ]]></description>
  <category>Venv</category>
  <category>Python</category>
  <category>Anaconda</category>
  <guid>https://all-khwarizmi.github.io/blog_quarto/posts/virtual-environnements/python_env.html</guid>
  <pubDate>Sun, 21 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://all-khwarizmi.github.io/blog_quarto/posts/virtual-environnements/venv-python.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>L’Education 2.0</title>
  <dc:creator>Jason Suárez</dc:creator>
  <link>https://all-khwarizmi.github.io/blog_quarto/posts/road_map/</link>
  <description><![CDATA[ 





<section id="education-2.0" class="level1">
<h1>Education 2.0</h1>
<p>Quiconque essaye d’apprendre une langue, a pu se rendre compte que malgré la multitude d’outils disponibles, il n’existe pas de méthode intégrale (ce terme est utilisé dans le sens de “qui contient tout ce qui est nécessaire”) pour apprendre une langue, surtout pour un public adolescent. En effet, les méthodes d’apprentissage des langues sont souvent trop scolaires et ne permettent pas de développer les compétences nécessaires pour communiquer dans la langue cible. De plus, les outils disponibles sur internet sont souvent trop éparpillés, ne permettant pas de suivre une progression logique, et/ou incomplètes, c’est-à-dire qu’elles ne permettent de travailler que certaines des compétences linguistiques.</p>
<section id="la-méthode-intégrale" class="level2">
<h2 class="anchored" data-anchor-id="la-méthode-intégrale">La méthode intégrale</h2>
<section id="quest-ce-que-la-méthode-intégrale" class="level3">
<h3 class="anchored" data-anchor-id="quest-ce-que-la-méthode-intégrale">Qu’est-ce que la méthode intégrale ?</h3>
<p>La méthode intégrale est une méthode d’apprentissage des langues qui a été développée par John and Evelyn White en 1963. Elle est basée sur le principe que l’apprentissage d’une langue doit se faire de manière naturelle, comme l’apprentissage de la langue maternelle. Elle se base sur 4 compétences linguistiques : la compréhension orale, la compréhension écrite, l’expression orale et l’expression écrite.</p>
</section>
<section id="mon-approche" class="level3">
<h3 class="anchored" data-anchor-id="mon-approche">Mon approche</h3>
<p>En tant que professeur de langue mon approche est de développer les 4 compétences linguistiques de manière équilibrée, intuitive et amusante. Cependant, ma pratique enseignante m’a montré que les élèves ont souvent des difficultés d’ordre méthodologique. En effet, ils ne savent pas comment travailler efficacement et comment utiliser les outils à leur disposition.</p>
<p>Dès lors, il devient primordial de leur apprendre à apprendre. C’est pourquoi, j’ai décidé de développer une méthode intégrale qui permettra aux élèves de travailler de manière autonome et efficace. Cette méthode est basée sur 3 piliers : &gt; la motivation, la méthodologie et la mémorisation.</p>
<p>Se pose alors la question de savoir comment développer ces 3 piliers. Pour répondre à cette question, j’ai dû explorer les sciences cognitives et les neurosciences afin de comprendre comment fonctionne le cerveau humain, l’informatique pour être capable de créer les outils nécessaires, et l’IA afin de créer un “double” du professeur à même de guider l’élève dans son apprentissage.</p>
</section>
</section>
<section id="architecture-conceptuelle" class="level2">
<h2 class="anchored" data-anchor-id="architecture-conceptuelle">Architecture conceptuelle</h2>
<p>Il s’agit-là d’un projet titanesque. J’ai longtemps alterné entre différents projets cherchant à développer chacun des piliers. Cependant, j’ai fini par me rendre compte que j’avais besoin d’une architecture conceptuelle qui me permettrait de développer les 3 piliers de manière simultanée.</p>
<section id="les-forces-en-présence" class="level3">
<h3 class="anchored" data-anchor-id="les-forces-en-présence">Les forces en présence</h3>
<section id="les-llm-large-language-model" class="level4">
<h4 class="anchored" data-anchor-id="les-llm-large-language-model">Les LLM (Large Language Model)</h4>
<p>J’ai d’abord été bleuffé par ChatGPT.</p>
<blockquote class="blockquote">
<p>ChatGPT est un modèle de génération de texte basé sur l’architecture Transformer. Ce modèle est capable de générer du texte à partir d’un texte d’entrée. Il est capable de générer des textes cohérents et pertinents.</p>
</blockquote>
<p>J’ai alors eu l’idée de créer un chatbot capable de guider l’élève dans son apprentissage. Cependant, je me suis vite rendu compte qu’il allait falloir orchestrer plusieurs LLM ou <strong>agents</strong> pour pouvoir couvrir l’ensemble des compétences linguistiques et methodologiques.</p>
</section>
<section id="les-sti-systèmes-tutoriels-intelligents" class="level4">
<h4 class="anchored" data-anchor-id="les-sti-systèmes-tutoriels-intelligents">Les STI (Systèmes Tutoriels Intelligents)</h4>
<blockquote class="blockquote">
<p>Les Systèmes Tutoriels Intelligents (STI) représentent une avancée majeure dans le domaine de l’éducation assistée par la technologie. Ces systèmes, qui allient les principes de l’intelligence artificielle à la pédagogie, sont conçus pour offrir une expérience d’apprentissage personnalisée, s’adaptant au rythme et aux besoins spécifiques de chaque apprenant.</p>
</blockquote>
<p>Les STI sont des programmes informatiques qui utilisent des techniques d’IA pour simuler l’interaction personnalisée entre un enseignant et un élève. Dans une vision traditionnelle, un STI se compose de quatre modules principaux : - le modèle du domaine, qui contient les connaissances à enseigner - le modèle pédagogique, qui définit la manière d’enseigner - le modèle de l’apprenant, qui s’adapte aux caractéristiques individuelles de l’élève - le modèle de l’interface, qui facilite l’interaction entre l’élève et le système.</p>
<p>Ces composants travaillent de concert pour créer un environnement d’apprentissage interactif et adaptatif, permettant à l’élève de progresser à son propre rythme et selon son style d’apprentissage unique.</p>
</section>
<section id="sti-pour-lapprentissage-des-langues" class="level4">
<h4 class="anchored" data-anchor-id="sti-pour-lapprentissage-des-langues">STI pour l’Apprentissage des Langues</h4>
<p>L’application des STI à l’apprentissage des langues ouvre des horizons passionnants. Dans un STI dédié à l’apprentissage d’une langue, le modèle du domaine intégrerait non seulement la grammaire et le vocabulaire, mais aussi des éléments culturels et contextuels essentiels à la maîtrise de la langue. Le modèle pédagogique pourrait inclure des méthodes telles que l’immersion linguistique, les dialogues interactifs, et les jeux de rôle. Le modèle de l’apprenant suivrait les progrès de l’élève en compréhension orale et écrite, en expression, et en grammaire, s’ajustant pour cibler les domaines nécessitant une attention supplémentaire. Enfin, l’interface serait conçue pour encourager l’engagement et la pratique active, avec des fonctionnalités comme la reconnaissance vocale pour la pratique de la prononciation et des simulations de conversation.</p>
<p>En intégrant ces éléments, un STI pour l’apprentissage des langues ne se contente pas de transmettre des connaissances ; il crée un environnement riche et interactif où l’apprenant peut s’immerger dans la langue et la culture, favorisant ainsi une expérience d’apprentissage plus naturelle et efficace.</p>
</section>
</section>
<section id="intégration-des-modèles-génératifs-dans-les-sti-pour-lapprentissage-des-langues" class="level3">
<h3 class="anchored" data-anchor-id="intégration-des-modèles-génératifs-dans-les-sti-pour-lapprentissage-des-langues">Intégration des Modèles Génératifs dans les STI pour l’Apprentissage des Langues</h3>
<section id="utilisation-des-modèles-génératifs" class="level4">
<h4 class="anchored" data-anchor-id="utilisation-des-modèles-génératifs">Utilisation des Modèles Génératifs</h4>
<p>Les modèles génératifs, tels que les grands modèles de langage basés sur l’intelligence artificielle, offrent une capacité de génération de contenu dynamique et contextuel. Dans un STI pour l’apprentissage des langues, ces modèles peuvent produire des dialogues réalistes, des exercices de compréhension, ou même des scénarios interactifs. Cette capacité de génération de contenu enrichit le modèle du domaine en fournissant une variété de matériel éducatif, allant des phrases simples aux dialogues complexes, adaptés au niveau de compétence de l’élève.</p>
</section>
<section id="personnalisation-et-réactivité" class="level4">
<h4 class="anchored" data-anchor-id="personnalisation-et-réactivité">Personnalisation et Réactivité</h4>
<p>Les modèles génératifs permettent une personnalisation plus profonde dans le modèle de l’apprenant. En analysant les réponses et les interactions de l’élève, le système peut ajuster dynamiquement le contenu pour cibler les zones de faiblesse, offrir des défis appropriés, et encourager la progression. De plus, ces modèles peuvent simuler des conversations réelles, permettant aux élèves de pratiquer la langue dans un contexte plus naturel et engageant.</p>
</section>
<section id="feedback-et-évaluation" class="level4">
<h4 class="anchored" data-anchor-id="feedback-et-évaluation">Feedback et Évaluation</h4>
<p>Dans le modèle pédagogique, les modèles génératifs contribuent à fournir un retour d’information instantané et contextualisé. Par exemple, après un exercice de dialogue, le système peut offrir des corrections, des suggestions et des explications spécifiques, aidant l’apprenant à comprendre et à corriger ses erreurs en temps réel.</p>
</section>
<section id="interaction-améliorée-grâce-à-lia" class="level4">
<h4 class="anchored" data-anchor-id="interaction-améliorée-grâce-à-lia">Interaction Améliorée grâce à l’IA</h4>
<p>Enfin, dans le modèle de l’interface, l’intégration de l’IA et des modèles génératifs peut rendre l’interaction avec le système plus intuitive et naturelle. Des fonctionnalités comme la reconnaissance vocale avancée et la génération de réponses en langue naturelle rendent l’apprentissage plus immersif et similaire à une interaction humaine.</p>
<p>En somme, l’intégration des modèles génératifs dans les STI pour l’apprentissage des langues transforme non seulement la manière dont le contenu éducatif est présenté, mais aussi la façon dont les élèves interagissent avec ce contenu, rendant l’expérience d’apprentissage plus riche, personnalisée et efficace.</p>


</section>
</section>
</section>
</section>

 ]]></description>
  <category>education</category>
  <category>STI</category>
  <category>LLM</category>
  <guid>https://all-khwarizmi.github.io/blog_quarto/posts/road_map/</guid>
  <pubDate>Fri, 19 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://all-khwarizmi.github.io/blog_quarto/posts/road_map/image.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Mon premier modèle d’apprentissage automatique</title>
  <dc:creator>Jason Suárez</dc:creator>
  <link>https://all-khwarizmi.github.io/blog_quarto/posts/first_notebook_model/goat_detector_training.html</link>
  <description><![CDATA[ 





<section id="goat-detector-training" class="level1">
<h1>Goat Detector Training</h1>
<p>This notebook utilizes the fastai and fastbook libraries to train a machine learning model for image classification. The goal is to classify images as either featuring Messi or Cristiano Ronaldo, two renowned football players. ## Importing Necessary Libraries Import fastai and fastbook libraries essential for image loading, preparation, and machine learning model operations.</p>
<div id="fig-installation" class="cell quarto-figure quarto-figure-center quarto-float anchored" data-outputid="fa1217f1-17a6-4bfb-845d-3ea74c688756" data-execution_count="1">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-installation-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastai fastbook Pillow nbdev</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fastbook</span>
<span id="cb1-3">fastbook.setup_book()</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastbook <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: nbdev in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (2.3.13)
Requirement already satisfied: ipywidgets&lt;=8.0.4 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbdev) (7.7.2)
Requirement already satisfied: fastcore&gt;=1.5.27 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbdev) (1.5.29)
Requirement already satisfied: execnb&gt;=0.1.4 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbdev) (0.1.5)
Requirement already satisfied: astunparse in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbdev) (1.6.3)
Requirement already satisfied: ghapi&gt;=1.0.3 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbdev) (1.0.4)
Requirement already satisfied: watchdog in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbdev) (3.0.0)
Requirement already satisfied: asttokens in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbdev) (2.4.1)
Requirement already satisfied: PyYAML in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbdev) (6.0.1)
Requirement already satisfied: ipython in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from execnb&gt;=0.1.4-&gt;nbdev) (8.20.0)
Requirement already satisfied: pip in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from fastcore&gt;=1.5.27-&gt;nbdev) (23.3.2)
Requirement already satisfied: packaging in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from fastcore&gt;=1.5.27-&gt;nbdev) (23.2)
Requirement already satisfied: ipykernel&gt;=4.5.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipywidgets&lt;=8.0.4-&gt;nbdev) (6.28.0)
Requirement already satisfied: ipython-genutils~=0.2.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipywidgets&lt;=8.0.4-&gt;nbdev) (0.2.0)
Requirement already satisfied: traitlets&gt;=4.3.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipywidgets&lt;=8.0.4-&gt;nbdev) (5.14.1)
Requirement already satisfied: widgetsnbextension~=3.6.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipywidgets&lt;=8.0.4-&gt;nbdev) (3.6.6)
Requirement already satisfied: jupyterlab-widgets&lt;3,&gt;=1.0.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipywidgets&lt;=8.0.4-&gt;nbdev) (1.1.7)
Requirement already satisfied: six&gt;=1.12.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from asttokens-&gt;nbdev) (1.16.0)
Requirement already satisfied: wheel&lt;1.0,&gt;=0.23.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from astunparse-&gt;nbdev) (0.42.0)
Requirement already satisfied: appnope in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.1.3)
Requirement already satisfied: comm&gt;=0.1.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.2.1)
Requirement already satisfied: debugpy&gt;=1.6.5 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.8.0)
Requirement already satisfied: jupyter-client&gt;=6.1.12 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (8.6.0)
Requirement already satisfied: jupyter-core!=5.0.*,&gt;=4.12 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (5.7.1)
Requirement already satisfied: matplotlib-inline&gt;=0.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.1.6)
Requirement already satisfied: nest-asyncio in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.5.8)
Requirement already satisfied: psutil in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (5.9.7)
Requirement already satisfied: pyzmq&gt;=24 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (25.1.2)
Requirement already satisfied: tornado&gt;=6.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (6.3.3)
Requirement already satisfied: decorator in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (5.1.1)
Requirement already satisfied: jedi&gt;=0.16 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (0.19.1)
Requirement already satisfied: prompt-toolkit&lt;3.1.0,&gt;=3.0.41 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (3.0.42)
Requirement already satisfied: pygments&gt;=2.4.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (2.17.2)
Requirement already satisfied: stack-data in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (0.6.2)
Requirement already satisfied: exceptiongroup in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (1.2.0)
Requirement already satisfied: pexpect&gt;4.3 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (4.8.0)
Requirement already satisfied: notebook&gt;=4.4.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (7.0.6)
Requirement already satisfied: parso&lt;0.9.0,&gt;=0.8.3 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jedi&gt;=0.16-&gt;ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (0.8.3)
Requirement already satisfied: python-dateutil&gt;=2.8.2 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-client&gt;=6.1.12-&gt;ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.8.2)
Requirement already satisfied: platformdirs&gt;=2.5 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-core!=5.0.*,&gt;=4.12-&gt;ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (4.1.0)
Requirement already satisfied: jupyter-server&lt;3,&gt;=2.4.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.12.4)
Requirement already satisfied: jupyterlab-server&lt;3,&gt;=2.22.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.25.2)
Requirement already satisfied: jupyterlab&lt;5,&gt;=4.0.2 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (4.0.10)
Requirement already satisfied: notebook-shim&lt;0.3,&gt;=0.2 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.2.3)
Requirement already satisfied: ptyprocess&gt;=0.5 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from pexpect&gt;4.3-&gt;ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (0.7.0)
Requirement already satisfied: wcwidth in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from prompt-toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (0.2.13)
Requirement already satisfied: executing&gt;=1.2.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from stack-data-&gt;ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (2.0.1)
Requirement already satisfied: pure-eval in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from stack-data-&gt;ipython-&gt;execnb&gt;=0.1.4-&gt;nbdev) (0.2.2)
Requirement already satisfied: anyio&gt;=3.1.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (4.2.0)
Requirement already satisfied: argon2-cffi in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (23.1.0)
Requirement already satisfied: jinja2 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (3.1.3)
Requirement already satisfied: jupyter-events&gt;=0.9.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.9.0)
Requirement already satisfied: jupyter-server-terminals in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.5.1)
Requirement already satisfied: nbconvert&gt;=6.4.4 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (7.14.1)
Requirement already satisfied: nbformat&gt;=5.3.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (5.9.2)
Requirement already satisfied: overrides in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (7.4.0)
Requirement already satisfied: prometheus-client in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.19.0)
Requirement already satisfied: send2trash&gt;=1.8.2 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.8.2)
Requirement already satisfied: terminado&gt;=0.8.3 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.18.0)
Requirement already satisfied: websocket-client in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.7.0)
Requirement already satisfied: async-lru&gt;=1.0.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.0.4)
Requirement already satisfied: jupyter-lsp&gt;=2.0.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.2.1)
Requirement already satisfied: tomli in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.0.1)
Requirement already satisfied: babel&gt;=2.10 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.14.0)
Requirement already satisfied: json5&gt;=0.9.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.9.14)
Requirement already satisfied: jsonschema&gt;=4.18.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (4.20.0)
Requirement already satisfied: requests&gt;=2.31 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.31.0)
Requirement already satisfied: idna&gt;=2.8 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from anyio&gt;=3.1.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (3.6)
Requirement already satisfied: sniffio&gt;=1.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from anyio&gt;=3.1.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.3.0)
Requirement already satisfied: typing-extensions&gt;=4.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from anyio&gt;=3.1.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (4.9.0)
Requirement already satisfied: MarkupSafe&gt;=2.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jinja2-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.1.3)
Requirement already satisfied: attrs&gt;=22.2.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema&gt;=4.18.0-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (23.2.0)
Requirement already satisfied: jsonschema-specifications&gt;=2023.03.6 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema&gt;=4.18.0-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2023.12.1)
Requirement already satisfied: referencing&gt;=0.28.4 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema&gt;=4.18.0-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.32.1)
Requirement already satisfied: rpds-py&gt;=0.7.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema&gt;=4.18.0-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.16.2)
Requirement already satisfied: python-json-logger&gt;=2.0.4 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.0.7)
Requirement already satisfied: rfc3339-validator in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.1.4)
Requirement already satisfied: rfc3986-validator&gt;=0.1.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.1.1)
Requirement already satisfied: beautifulsoup4 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (4.12.2)
Requirement already satisfied: bleach!=5.0.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (6.1.0)
Requirement already satisfied: defusedxml in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.7.1)
Requirement already satisfied: jupyterlab-pygments in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.3.0)
Requirement already satisfied: mistune&lt;4,&gt;=2.0.3 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (3.0.2)
Requirement already satisfied: nbclient&gt;=0.5.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.8.0)
Requirement already satisfied: pandocfilters&gt;=1.4.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.5.0)
Requirement already satisfied: tinycss2 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.2.1)
Requirement already satisfied: fastjsonschema in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from nbformat&gt;=5.3.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.19.1)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from requests&gt;=2.31-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (3.3.2)
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from requests&gt;=2.31-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.1.0)
Requirement already satisfied: certifi&gt;=2017.4.17 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from requests&gt;=2.31-&gt;jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2023.11.17)
Requirement already satisfied: argon2-cffi-bindings in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from argon2-cffi-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (21.2.0)
Requirement already satisfied: webencodings in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from bleach!=5.0.0-&gt;nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (0.5.1)
Requirement already satisfied: fqdn in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.5.1)
Requirement already satisfied: isoduration in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (20.11.0)
Requirement already satisfied: jsonpointer&gt;1.13 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.4)
Requirement already satisfied: uri-template in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.3.0)
Requirement already satisfied: webcolors&gt;=1.11 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.13)
Requirement already satisfied: cffi&gt;=1.0.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from argon2-cffi-bindings-&gt;argon2-cffi-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.16.0)
Requirement already satisfied: soupsieve&gt;1.2 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from beautifulsoup4-&gt;nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.5)
Requirement already satisfied: pycparser in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from cffi&gt;=1.0.1-&gt;argon2-cffi-bindings-&gt;argon2-cffi-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.21)
Requirement already satisfied: arrow&gt;=0.15.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from isoduration-&gt;jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (1.3.0)
Requirement already satisfied: types-python-dateutil&gt;=2.8.10 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from arrow&gt;=0.15.0-&gt;isoduration-&gt;jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.0-&gt;ipywidgets&lt;=8.0.4-&gt;nbdev) (2.8.19.20240106)
Requirement already satisfied: gradio==3.47.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (3.47.1)
Requirement already satisfied: aiofiles&lt;24.0,&gt;=22.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (23.2.1)
Requirement already satisfied: altair&lt;6.0,&gt;=4.2.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (5.2.0)
Requirement already satisfied: fastapi in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (0.109.0)
Requirement already satisfied: ffmpy in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (0.3.1)
Requirement already satisfied: gradio-client==0.6.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (0.6.0)
Requirement already satisfied: httpx in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (0.26.0)
Requirement already satisfied: huggingface-hub&gt;=0.14.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (0.20.2)
Requirement already satisfied: importlib-resources&lt;7.0,&gt;=1.3 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (6.1.1)
Requirement already satisfied: jinja2&lt;4.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (3.1.3)
Requirement already satisfied: markupsafe~=2.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (2.1.3)
Requirement already satisfied: matplotlib~=3.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (3.8.2)
Requirement already satisfied: numpy~=1.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (1.26.3)
Requirement already satisfied: orjson~=3.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (3.9.10)
Requirement already satisfied: packaging in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (23.2)
Requirement already satisfied: pandas&lt;3.0,&gt;=1.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (2.1.4)
Requirement already satisfied: pillow&lt;11.0,&gt;=8.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (10.2.0)
Requirement already satisfied: pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,&lt;3.0.0,&gt;=1.7.4 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (2.0.3)
Requirement already satisfied: pydub in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (0.25.1)
Requirement already satisfied: python-multipart in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (0.0.6)
Requirement already satisfied: pyyaml&lt;7.0,&gt;=5.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (6.0.1)
Requirement already satisfied: requests~=2.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (2.31.0)
Requirement already satisfied: semantic-version~=2.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (2.10.0)
Requirement already satisfied: typing-extensions~=4.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (4.9.0)
Requirement already satisfied: uvicorn&gt;=0.14.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (0.25.0)
Requirement already satisfied: websockets&lt;12.0,&gt;=10.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio==3.47.1) (11.0.3)
Requirement already satisfied: fsspec in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from gradio-client==0.6.0-&gt;gradio==3.47.1) (2023.10.0)
Requirement already satisfied: jsonschema&gt;=3.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from altair&lt;6.0,&gt;=4.2.0-&gt;gradio==3.47.1) (4.20.0)
Requirement already satisfied: toolz in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from altair&lt;6.0,&gt;=4.2.0-&gt;gradio==3.47.1) (0.12.0)
Requirement already satisfied: filelock in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from huggingface-hub&gt;=0.14.0-&gt;gradio==3.47.1) (3.13.1)
Requirement already satisfied: tqdm&gt;=4.42.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from huggingface-hub&gt;=0.14.0-&gt;gradio==3.47.1) (4.66.1)
Requirement already satisfied: contourpy&gt;=1.0.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from matplotlib~=3.0-&gt;gradio==3.47.1) (1.2.0)
Requirement already satisfied: cycler&gt;=0.10 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from matplotlib~=3.0-&gt;gradio==3.47.1) (0.12.1)
Requirement already satisfied: fonttools&gt;=4.22.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from matplotlib~=3.0-&gt;gradio==3.47.1) (4.47.2)
Requirement already satisfied: kiwisolver&gt;=1.3.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from matplotlib~=3.0-&gt;gradio==3.47.1) (1.4.5)
Requirement already satisfied: pyparsing&gt;=2.3.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from matplotlib~=3.0-&gt;gradio==3.47.1) (3.1.1)
Requirement already satisfied: python-dateutil&gt;=2.7 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from matplotlib~=3.0-&gt;gradio==3.47.1) (2.8.2)
Requirement already satisfied: pytz&gt;=2020.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from pandas&lt;3.0,&gt;=1.0-&gt;gradio==3.47.1) (2023.3.post1)
Requirement already satisfied: tzdata&gt;=2022.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from pandas&lt;3.0,&gt;=1.0-&gt;gradio==3.47.1) (2023.4)
Requirement already satisfied: annotated-types&gt;=0.4.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,&lt;3.0.0,&gt;=1.7.4-&gt;gradio==3.47.1) (0.6.0)
Requirement already satisfied: pydantic-core==2.3.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,&lt;3.0.0,&gt;=1.7.4-&gt;gradio==3.47.1) (2.3.0)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from requests~=2.0-&gt;gradio==3.47.1) (3.3.2)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from requests~=2.0-&gt;gradio==3.47.1) (3.6)
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from requests~=2.0-&gt;gradio==3.47.1) (2.1.0)
Requirement already satisfied: certifi&gt;=2017.4.17 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from requests~=2.0-&gt;gradio==3.47.1) (2023.11.17)
Requirement already satisfied: click&gt;=7.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from uvicorn&gt;=0.14.0-&gt;gradio==3.47.1) (8.1.7)
Requirement already satisfied: h11&gt;=0.8 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from uvicorn&gt;=0.14.0-&gt;gradio==3.47.1) (0.14.0)
Requirement already satisfied: starlette&lt;0.36.0,&gt;=0.35.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from fastapi-&gt;gradio==3.47.1) (0.35.1)
Requirement already satisfied: anyio in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from httpx-&gt;gradio==3.47.1) (4.2.0)
Requirement already satisfied: httpcore==1.* in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from httpx-&gt;gradio==3.47.1) (1.0.2)
Requirement already satisfied: sniffio in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from httpx-&gt;gradio==3.47.1) (1.3.0)
Requirement already satisfied: attrs&gt;=22.2.0 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;6.0,&gt;=4.2.0-&gt;gradio==3.47.1) (23.2.0)
Requirement already satisfied: jsonschema-specifications&gt;=2023.03.6 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;6.0,&gt;=4.2.0-&gt;gradio==3.47.1) (2023.12.1)
Requirement already satisfied: referencing&gt;=0.28.4 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;6.0,&gt;=4.2.0-&gt;gradio==3.47.1) (0.32.1)
Requirement already satisfied: rpds-py&gt;=0.7.1 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;6.0,&gt;=4.2.0-&gt;gradio==3.47.1) (0.16.2)
Requirement already satisfied: six&gt;=1.5 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib~=3.0-&gt;gradio==3.47.1) (1.16.0)
Requirement already satisfied: exceptiongroup&gt;=1.0.2 in /Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages (from anyio-&gt;httpx-&gt;gradio==3.47.1) (1.2.0)</code></pre>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-installation-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1
</figcaption>
</figure>
</div>
<section id="loading-and-preparing-images" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-preparing-images">Loading and Preparing Images</h2>
<p>Load the dataset containing images of Messi and Cristiano Ronaldo. This step includes preprocessing the images to make them suitable for training the model.</p>
<div id="cell-5" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> search_images(term, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>):</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"term : (string )name of the search target"</span></span>
<span id="cb3-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Searching for '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>term<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> search_images_ddg(term, max_images)</span>
<span id="cb3-9"></span></code></pre></div>
</div>
<div id="cell-6" class="cell" data-outputid="4bbc480c-7d79-46f4-80ac-c3217007b3b9" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cristiano Ronaldo photos'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-2">urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Cristiano Ronaldo photos'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>'http://www.fotolip.com/wp-content/uploads/2016/05/Cristiano-Ronaldo-1.jpg'</code></pre>
</div>
</div>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastdownload <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_url</span>
<span id="cb7-2">dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cristiano.jpg'</span></span>
<span id="cb7-3">download_url(urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dest, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-4"></span>
<span id="cb7-5">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dest)</span>
<span id="cb7-6">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<figure class="figure">
<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/first_notebook_model/goat_detector_training_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-8" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">messi_dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'messi.jpg'</span></span>
<span id="cb8-2">messi_image_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lionel Messi photos'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-3">messi_image_url</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Lionel Messi photos'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>(#1) ['https://wallpapercave.com/wp/wp2043344.jpg']</code></pre>
</div>
</div>
<div id="cell-9" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">download_url(messi_image_url[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], messi_dest, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb11-2">im_messi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(messi_dest)</span>
<span id="cb11-3">im_messi.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>
<figure class="figure">
<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/first_notebook_model/goat_detector_training_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-10" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">searches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cristiano Ronaldo'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lionel Messi'</span></span>
<span id="cb12-2"></span>
<span id="cb12-3">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>)</span>
<span id="cb12-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> searches:</span>
<span id="cb12-7">    dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span>
<span id="cb12-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dest)</span>
<span id="cb12-9">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-10">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> photo'</span>))</span>
<span id="cb12-11">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pause between searches to avoid over-loading server</span></span>
<span id="cb12-12">    resize_images(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o, max_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>images/Cristiano Ronaldo
Searching for 'Cristiano Ronaldo photo'
images/Lionel Messi
Searching for 'Lionel Messi photo'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/jasonsuarez/anaconda3/envs/pydata-book/lib/python3.10/site-packages/PIL/Image.py:981: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  warnings.warn(</code></pre>
</div>
</div>
<div id="cell-11" class="cell" data-outputid="2b737003-1f96-45c9-eb8a-780ac4aa10b8" data-execution_count="50">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if any image is broken and delete it</span></span>
<span id="cb15-2">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(get_image_files(path))</span>
<span id="cb15-3">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>0</code></pre>
</div>
</div>
</section>
<section id="preparing-for-model-training" class="level2">
<h2 class="anchored" data-anchor-id="preparing-for-model-training">Preparing for Model Training</h2>
<p>Setup of the pretrained model for fine-tuning. This includes specifying model parameters and configuring the learning environment.</p>
<div id="cell-13" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb17-2">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb17-3">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb17-4">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb17-5">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb17-6">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>)]</span>
<span id="cb17-7">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb17-8"></span>
<span id="cb17-9">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/first_notebook_model/goat_detector_training_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="training-the-model" class="level2">
<h2 class="anchored" data-anchor-id="training-the-model">Training the Model</h2>
<p>Fine-tuning the pretrained model on our dataset. This step involves training the model to classify images as either Messi or Cristiano Ronaldo accurately.</p>
<div id="cell-15" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb18-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.065711</td>
<td>0.397649</td>
<td>0.196078</td>
<td>00:02</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.476915</td>
<td>0.178397</td>
<td>0.058824</td>
<td>00:02</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.365285</td>
<td>0.163348</td>
<td>0.058824</td>
<td>00:02</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.277333</td>
<td>0.129455</td>
<td>0.058824</td>
<td>00:02</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.show_results()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://all-khwarizmi.github.io/blog_quarto/posts/first_notebook_model/goat_detector_training_files/figure-html/cell-12-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="evaluating-the-model" class="level2">
<h2 class="anchored" data-anchor-id="evaluating-the-model">Evaluating the Model</h2>
<p>Assess the performance of the trained model on test data to ensure accurate classification.</p>
<div id="cell-18" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">is_goat,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cristiano.jpg'</span>))</span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Who is it?: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_goat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb20-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's the GOAT: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>Is it the GOAT?: Cristiano Ronaldo.
Probability it's the GOAT: 0.9999</code></pre>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">is_goat,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'messi.jpg'</span>))</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Who is it?: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_goat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb22-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's the GOAT: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> 🙃"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Picking the probability it's Ronaldo when it's Messi tells the joke</span></span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>Who is it?: Lionel Messi.
Probability it's the GOAT: 0.0002 🙃</code></pre>
</div>
</div>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exports the model as a pickel file that may later be loaded, regardless of all the code that have served to train it.</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look on the goat_detector_inference.ipynb file to see how it's done </span></span>
<span id="cb24-3">learn.export()</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Summary of the training process and results. The trained model is now capable of classifying images between Messi and Cristiano Ronaldo with a certain accuracy.</p>


</section>
</section>

 ]]></description>
  <category>AI</category>
  <category>Machine Learning</category>
  <category>Python</category>
  <category>Fastai</category>
  <guid>https://all-khwarizmi.github.io/blog_quarto/posts/first_notebook_model/goat_detector_training.html</guid>
  <pubDate>Fri, 12 Jan 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
